# Global #

stages:
  - Platform Tests
  - Analysis

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  CTEST_OUTPUT_ON_FAILURE: '1'

# Platform Tests #

.platform_unix_template: &platform_unix_template
  stage: Platform Tests
  tags:
    - docker-linux
  script:
    - mkdir build && cd build
    - cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON -DBUILD_EXAMPLES=ON -DNO_VULKAN_DEVICE=ON -DBUILD_WINDOW_TESTS=OFF ${CMAKE_OPTIONS}
    - ninja
    - ninja test

.platform_windows_template: &platform_windows_template
  stage: Platform Tests
  tags:
    - docker-windows
  script:
    - echo 'try {'  | out-file -encoding utf8 build.ps1
    - echo 'cd ..; mkdir workdir-cpy' | out-file -encoding utf8 -append build.ps1
    - echo 'Copy-Item C:\workdir\* -Destination C:\workdir-cpy -Recurse' | out-file -encoding utf8 -append build.ps1
    - echo 'cd workdir-cpy' | out-file -encoding utf8 -append build.ps1
    - echo 'mkdir build; cd build' | out-file -encoding utf8 -append build.ps1
    - echo "cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON -DBUILD_EXAMPLES=ON -DNO_VULKAN_DEVICE=ON -DBUILD_WINDOW_TESTS=OFF $env:CMAKE_OPTIONS" | out-file -encoding utf8 -append build.ps1
    - echo 'if(-not $?){throw}' | out-file -encoding utf8 -append build.ps1
    - echo 'ninja' | out-file -encoding utf8 -append build.ps1
    - echo 'if(-not $?){throw}' | out-file -encoding utf8 -append build.ps1
    - echo 'ninja test' | out-file -encoding utf8 -append build.ps1
    - echo 'if(-not $?){throw}' | out-file -encoding utf8 -append build.ps1
    - echo '} catch { exit 1 }' | out-file -encoding utf8 -append build.ps1
    - docker run --rm -v ${pwd}:C:\workdir $env:IMAGE C:\workdir\build.ps1

Fedora/GCC:
  image: stabletec/build-foe:fedora-gcc
  <<: *platform_unix_template

Fedora/Clang:
  image: stabletec/build-foe:fedora-clang
  <<: *platform_unix_template

openSUSE/GCC:
  image: stabletec/build-foe:opensuse-gcc
  <<: *platform_unix_template

openSUSE/Clang:
  image: stabletec/build-foe:opensuse-clang
  <<: *platform_unix_template

Ubuntu/GCC:
  image: stabletec/build-foe:ubuntu-gcc
  <<: *platform_unix_template

Ubuntu/Clang:
  image: stabletec/build-foe:ubuntu-clang
  <<: *platform_unix_template

Windows/MSVC2017:
  variables:
    IMAGE: stabletec/build-foe:windows-msvc2017
  <<: *platform_windows_template

# Analysis #

.Doxygen Documentation:
  stage: Analysis
  image: stabletec/doxygen:latest
  tags:
    - docker-linux
  script:
    - mkdir build && cd build
    - cmake .. -DNO_COMPILE=ON
    - make doc
    - cd doc/latex
    - make
  artifacts:
    name: DoxygenDocs
    paths: 
      - build/doc
    expire_in: 1 day

.Code Coverage:
  stage: Analysis
  image: stabletec/build-foe:fedora-clang
  tags:
    - docker-linux
  script:
    - mkdir build && cd build
    - cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release -DCODE_COVERAGE=ON -DBUILD_TESTS=ON -DNO_VULKAN_DEVICE=ON -DBUILD_WINDOW_TESTS=OFF
    - ninja
    - ninja ccov
    - ninja ccov-all
    - ninja ccov-report
    - ninja ccov-all-report
  artifacts:
    name: CodeCoverage
    paths: 
      - build/ccov
    expire_in: 1 day

.analysis_template: &analysis_template
  stage: Analysis
  image: stabletec/build-foe:fedora-clang
  allow_failure: true
  tags:
    - docker-linux
  script:
    - mkdir build && cd build
    - cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON -DBUILD_EXAMPLES=ON -DNO_VULKAN_DEVICE=ON -DBUILD_WINDOW_TESTS=OFF ${CMAKE_OPTIONS}
    - ninja
    - ninja test

.Static Analysis:
  variables:
    CMAKE_OPTIONS: -DCLANG_TIDY=ON -DCPPCHECK=ON -DIWYU=ON
  <<: *analysis_template

.ThreadSanitizer:
  variables:
    CMAKE_OPTIONS: -DUSE_SANITIZER=Thread
  <<: *analysis_template

.AddressSanitizer:
  variables:
    CMAKE_OPTIONS: -DUSE_SANITIZER=Address
  <<: *analysis_template

.LeakSanitizer:
  variables:
    CMAKE_OPTIONS: -DUSE_SANITIZER=Leak
  <<: *analysis_template

.UndefinedSanitizer:
  variables:
    CMAKE_OPTIONS: -DUSE_SANITIZER=Undefined
  <<: *analysis_template